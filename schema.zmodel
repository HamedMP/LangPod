generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = './src/hooks/zenstack'
}

// plugin zenstackmd {
//     provider = 'zenstack-markdown'
// }

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  createdAt DateTime @default(now())
  name      String
  email     String

  // Relations
  userCourses UserCourse[]

  @@allow('read', auth() != null)
}

model Language {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique // ISO 639-1 code
  createdAt DateTime @default(now())

  // Relations
  nativeCourses Course[] @relation("NativeLanguage")
  targetCourses Course[] @relation("TargetLanguage")

  @@allow('read', true)
}

model Course {
  id             String   @id @default(uuid())
  nativeLanguage Language @relation("NativeLanguage", fields: [nativeLanguageId], references: [id])
  nativeLanguageId String
  targetLanguage Language @relation("TargetLanguage", fields: [targetLanguageId], references: [id])
  targetLanguageId String
  outcome         String? 
  level          String   // A1, A2, B1, B2, C1, C2
  createdAt      DateTime @default(now())

  // Relations
  userCourses    UserCourse[]
  lessons        Lesson[]

  @@allow('all', auth() != null)
}

model UserCourse {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  role      UserCourseRole @default(STUDENT)
  createdAt DateTime @default(now())

  @@unique([userId, courseId, role])
  @@allow('all', auth() != null)
}

enum UserCourseRole {
  STUDENT
  TUTOR
}

model Lesson {
  id               String    @id @default(uuid())
  title            String
  type            String    // 'catalog' or 'user_generated'
  scenarioContext  String
  lessonJson Json?   
  audioUrl        String?   
  createdAt        DateTime  @default(now())

  // Relations
  course           Course    @relation(fields: [courseId], references: [id])
  courseId         String
  progress         ProgressStatus

  @@allow('all', auth() != null)
}


enum ProgressStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}