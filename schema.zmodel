generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  createdAt DateTime @default(now())

  // Relations
  studentCourses Course[]    @relation("StudentCourses")
  tutorCourses  Course[]    @relation("TutorCourses")
  lessons       Lesson[]
}

model Language {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  // Relations
  nativeCourses Course[] @relation("NativeLanguage")
  targetCourses Course[] @relation("TargetLanguage")
  nativeCatalog LessonCatalog[] @relation("CatalogNativeLanguage")
  targetCatalog LessonCatalog[] @relation("CatalogTargetLanguage")
}

model Course {
  id             String   @id @default(uuid())
  nativeLanguage Language @relation("NativeLanguage", fields: [nativeLanguageId], references: [id])
  nativeLanguageId String
  targetLanguage Language @relation("TargetLanguage", fields: [targetLanguageId], references: [id])
  targetLanguageId String
  level          String   // A1, A2, B1, B2, C1, C2
  createdAt      DateTime @default(now())

  // Relations
  student        User      @relation("StudentCourses", fields: [studentId], references: [id])
  studentId      String
  tutor          User?     @relation("TutorCourses", fields: [tutorId], references: [id])
  tutorId        String?
  lessons        Lesson[]
}

model Lesson {
  id               String    @id @default(uuid())
  title            String
  type            String    // 'catalog' or 'user_generated'
  scenarioContext  String
  lessonJson Json?   // For user-generated content
  audioUrl        String?   // For user-generated content
  createdAt        DateTime  @default(now())

  // Relations
  course           Course    @relation(fields: [courseId], references: [id])
  courseId         String
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  progress         ProgressStatus
}

model LessonCatalog {
  id             String   @id @default(uuid())
  nativeLanguage Language @relation("CatalogNativeLanguage", fields: [nativeLanguageId], references: [id])
  nativeLanguageId String
  targetLanguage Language @relation("CatalogTargetLanguage", fields: [targetLanguageId], references: [id])
  targetLanguageId String
  content        Json     // Contains: { lessons: [{ index, title, description, text, audioUrl, imageUrl, difficulty }] }
  createdAt      DateTime @default(now())
}

enum ProgressStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}